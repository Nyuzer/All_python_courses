#–ü—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ  –∫—É—Ä—Å—É Stepik
"""print(input(), '- —á–µ–º–ø–∏–æ–Ω!')""" #s1,s2,s3 = input(), input(), input()
#sep  sep=' '   # –ø—Ä–æ–±–µ–ª                      –æ–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ end
"""print('a', 'b', 'c', sep='*')
print('d', 'e', 'f', sep='**')"""
#end  end='\n'  # –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏                –æ–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ end –Ω–µ –ø–æ–º–µ—â–µ–Ω "\n"
"""print('a', 'b', 'c', end='@')
print('d', 'e', 'f', end='@@')"""

"""print('a', 'b', 'c', sep='*', end='finish')
print('d', 'e', 'f', sep='**', end='^__^')"""

#format
"""name = input()
print("–ü—Ä–∏–≤–µ—Ç, {0}!".format(name))"""

#** 	–í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å
#% 	–û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è
#// 	–¶–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ    –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ –æ–∫—Ä—É–≥–ª—è—é—Ç—Å—è –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É.

"""a,b,c = input()
print(a+b+c, a+c+b, b+a+c, b+c+a, c+a+b, c+b+a, sep='\n')"""


#if
"""num = int(input())
s1=num // 1000
s2=(num%1000)//100
s3=(num%100)//10
s4=num%10
if s1+s4==s2-s3:
    print("–î–ê")
else:
    print("–ù–ï–¢")"""


"""a,b,c = int(input()),int(input()),int(input())
raz = b-a 
if c==b+raz:
    print("YES")
else:
    print("NO")"""

"""a,b,c,d = int(input()),int(input()),int(input()),int(input())
minAB = 0
minCD = 0
if a<b:
    minAB = a
else:
    minAB = b
if c<d:
    minCD = c
else:
    minCD = d
if minAB<minCD:
    print(minAB)
else:
    print(minCD)"""

#2 —Å–ø–æ—Å–æ–± —Ä–µ—à–µ–Ω–∏—è
"""a,b,c,d = int(input()),int(input()),int(input()),int(input())
print(min(a,b,c,d))"""

#–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã and ‚Äî –ª–æ–≥–∏—á–µ—Å–∫–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ;   or ‚Äî –ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–ª–æ–∂–µ–Ω–∏–µ;   not ‚Äî –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –æ—Ç—Ä–∏—Ü–∞–Ω–∏–µ.
"""age = int(input('–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?: '))
grade = int(input('–í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ –≤—ã —É—á–∏—Ç–µ—Å—å?: '))
city = input('–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?: ')
if age >= 12 and grade >= 7 and (city == '–ú–æ—Å–∫–≤–∞' or city == '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'):
    print('–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.')
else:
    print('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.')"""

#–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–Ω–æ–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω—ã–º.
"""num = int(input())
if 100 <= num <= 999:     # num >= 100 and num <= 999
    print('–ß–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω—ã–º')
else:
    print('–ß–∏—Å–ª–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä—ë—Ö–∑–Ω–∞—á–Ω—ã–º')"""

#–≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã
"""for hours in range(24):
    for minutes in range(60):
        for seconds in range(60):
            print(hours, ':', minutes, ':', seconds)"""

"""for i in range(3):
    for j in range(3):
        if i == j:
            break
        print(i, j)""" #<<1 0 2 0 2 1

"""for i in range(3):
    for j in range(3):
        if i == j:
            continue
        print(i, j)"""#<<0 1 0 2 1 0 1 2 2 0 2 1

#28n+30k+31m=365.
"""total = 0
for n in range(1, 14):
    for k in range(1, 13):
        for m in range(1,12):
            if 28 * n + 30 * k + 31 * m == 365:
                total += 1
                print('n =', n, 'k =', k,"m =", m)"""

"""n = int(input())
plus = 0
count = 0
for i in range(1,n+1):
    for j in range(1,i+1):
        if i%j==0:
            count+=1
    print(i,'+'*count, sep='')
    count = 0"""

"""#28n+30k+31m=365.
total = 0
for n in range(1, 11):  #–±—ã–∫
    for k in range(1, 21):  #–∫–æ—Ä–æ–≤–∞
        for m in range(1,201):  #—Ç–µ–ª–µ–Ω–æ–∫
            if 10 * n + 5 * k + 0.5 * m == 100 and n+k+m==100:
                print('n =', n, 'k =', k,"m =", m)"""









#c—Ç—Ä–æ–∫–∏ –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–µ .find,.rfind,.count,.startswith,.endswith,.replace("o","@"),strip()
"""n = input()
count = 0
for i in range(10):
    count += n.count(str(i))
print(count)
"""

"""s = input()
f = s.count('f')
if f>1:
    print(s.find('f'),s.rfind('f'))
elif f==1:
    print(s.find("f"))
else:
    print("NO")"""
#isalpha,isdigit,islower,isupper,isspace,isalnum
#–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫
"""age = 27
txt = 'My name is Timur, I am {}'.format(age)
print(txt)"""

"""first_name = 'Timur'
last_name = 'Guev'
age = 27
profession = 'math teacher'
affiliation = 'BeeGeek'
print(f'Hello, {first_name} {last_name}. You are {age}. You are a {profession}. You were a member of {affiliation}')"""

#ASCII & Unicode(–∞—Å–∫–∏)
#ord,chr
"""for i in range(26):
    print(chr(ord('A') + i))""" # –≤—ã–≤–æ–¥–∏—Ç –∞–ª—Ñ–∞–≤–∏—Ç –∞–Ω–≥–ª

"""s = input()
for i in s:
     print(ord(i), end = " ")"""

"""num1 = int(input())
num2 = int(input())
for i in range(num1 , num2+1):
    print(chr(i), end=" ")"""


"""n = int(input())
s = input()
k =''
for c in s:
    if ord(c) -n < 97:
        k += chr(ord(c) - n - 6)
    else:
        k += chr(ord(c) - n )
print(k.lower())"""

#—Å–ø–∏—Å–∫–∏  list()             numbers = list(range(5))
"""numbers = [2, 4, 6, 8, 10]
languages = ['Python', 'C#', 'C++', 'Java']"""

#len(),sum(),min(),max()
#print(len(['apple', 'banana', 'cherry']))   # –≤—ã–≤–æ–¥–∏–º –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞, —Å–æ—Å—Ç–æ—è—â–µ–≥–æ –∏–∑ 3 —ç–ª–µ–º–µ–Ω—Ç–æ–≤

"""numbers = [2, 4, 6, 8, 10]

if 2 in numbers:
    print('–°–ø–∏—Å–æ–∫ numbers —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ 2')
else:
    print('–°–ø–∏—Å–æ–∫ numbers –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ 2')"""

"""fruits = ['apple', 'apricot', 'banana', 'cherry', 'kiwi', 'lemon', 'mango']
fruits[2:5] = ['–±–∞–Ω–∞–Ω', '–≤–∏—à–Ω—è', '–∫–∏–≤–∏']"""

"""print([1, 2, 3, 4] + [5, 6, 7, 8])
print([7, 8] * 3)
print([0] * 10)"""

"""numbers = [3, 4, 10, 3333, 12, -7, -5, 4]
print('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç =', min(numbers))
print('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç =', max(numbers))
print('–°—É–º–º–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞ =', sum(numbers))"""

#append(),extend(),del
"""numbers = [1, 1, 2, 3, 5, 8, 13]  # —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
numbers.append(21)  # –¥–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ 21 –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
numbers.append(34)  # –¥–æ–±–∞–≤–ª—è–µ–º —á–∏—Å–ª–æ 34 –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞"""

"""numbers = [0, 2, 4, 6, 8, 10]
odds = [1, 3, 5, 7]
numbers.extend(odds)
print(numbers)""" #<<[0, 2, 4, 6, 8, 10, 1, 3, 5, 7]

"""numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
del numbers[5]    # —É–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ—é—â–∏–π –∏–Ω–¥–µ–∫—Å 5
print(numbers)"""

"""numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
del numbers[::2]
print(numbers)"""


"""n = int(input())
ls = []
ls2 = []
if n>2:
    for i in range(n):
        a = int(input())
        ls.append(a)
        if i>=1:
            ls2.append(ls[i-1]+ls[i])
    print(ls2)
elif n==2:
    x = int(input())
    y = int(input())
    ls.append(x+y)
    print(ls)"""

#del —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—á–µ—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
"""n = int(input())
lis = []
for i in range (n):
    a = int(input())
    lis.append(a)
del lis[1:n:2]
print(lis)
"""

#k-–∞—è –±—É–∫–≤–∞ —Å–ª–æ–≤–∞ üå∂Ô∏èüå∂Ô∏è
"""n = int(input())
str = ''
ls1 = []
ls2 = []
ls3 = []
for _ in range(n):
    x = input()
    ls1.append(x)
k = int(input())
for i in range(n):
    ls2.extend(ls1[i])
    if len(ls2)< k:
        del ls2[::]
        continue
    elif len(ls2) >= k:
        ls3.append(ls2[k-1])
    del ls2[::]
lns = len(ls3)
for i in range(lns):
    str += ls3[i]
print(str)"""

# –í—ã–≤–æ–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
"""numbers = [0, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10]
for num in numbers:
    print(num)
"""
"""numbers = [0, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]
for i in range(len(numbers)):
    print(numbers[i])"""

"""
numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(*numbers)"""

"""numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(*numbers, sep='\n')"""

"""numbers = [1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111]
for i in range(len(numbers)):
    numbers[i] = numbers[i]**2
print(sum(numbers))
"""

"""n = int(input())
ls = []
fx = 0
for i in range(n):
    x = int(input())
    print(x)
    fx = x**2 + 2*x + 1
    ls.append(fx)
print()
print(*ls, sep="\n")"""

"""#1
n = int(input())
ls = []
for i in range(n):
    x = int(input())
    ls.append(x)
ls.remove(max(ls))
ls.remove(min(ls))
print(*ls, sep="\n")
#2
n = int(input())
ls = []
for i in range(n):
    x = int(input())
    ls.append(x)
del ls[ls.index(max(ls))]
del ls[ls.index(min(ls))]
print(*ls, sep="\n")"""


"""n = int(input())
j = []
for i in range(n):
    k = input()
    if k not in j:
        j.append(k)
print(*j, sep="\n")"""

"""n = int(input())
j = []
for i in range(n):
    k = input()
    j.append(k)
psk = input()
for i in range(len(j)):
    if psk.lower() in j[i].lower():
        print(j[i])"""

#split(), join() —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
"""s = 'Python is the most powerful language'
words = s.split()
print(words)"""

"""ip = '192.168.1.24'
numbers = ip.split('.')    # —É–∫–∞–∑—ã–≤–∞–µ–º —è–≤–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
print(numbers)"""

"""words = ['Python', 'is', 'the', 'most', 'powerful', 'language']
s = ' '.join(words)
print(s)"""

"""st = input().split()
for i in range(len(st)):
    print(st[i][0], end=".")"""

"""st = input().split()
for i in range(len(st)):
    st[i] = int(st[i])
    print('+' * st[i])"""

"""numbers = input().split()
for i in range(len(numbers)):
    numbers[i] = int(numbers[i])"""

"""st = input().split(".")
flag = 0
for i in range(len(st)):
    st[i] = int(st[i])
    if 0<=st[i]<=255:
        flag+=1
    else:
        print("–ù–ï–¢")
        break
if flag==4:
    print("–î–ê")"""


"""
st = input()
raz = input()
print(raz.join(st))"""

"""st = input().split()
count = 0
for i in range(len(st)):
    st[i] = int(st[i])
for i in range(len(st)):
    for j in range(i + 1, len(st)):
        if st[i] == st[j]:
            count += 1
print(count)"""

#–º–µ—Ç–æ–¥—ã —Å–ø–∏—Å–∫–∞ insert(),index(),remove(),pop(),reverse(),count(),clear(),copy(),sort()
"""names = ['Gvido', 'Roman' , 'Timur']
print(names)
names.insert(0, 'Anders')
print(names)
names.insert(3, 'Josef')
print(names)""" #['Gvido', 'Roman' , 'Timur']   ['Anders', 'Gvido', 'Roman' , 'Timur']  ['Anders', 'Gvido', 'Roman' , 'Josef', 'Timur']

"""names = ['Gvido', 'Roman' , 'Timur']
position = names.index('Timur')
print(position)""" #2

"""names = ['Gvido', 'Roman' , 'Timur']
if 'Anders' in names:
    position = names.index('Anders')
    print(position)
else:
    print('–¢–∞–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ')"""

"""food = ['–†–∏—Å', '–ö—É—Ä–∏—Ü–∞', '–†—ã–±–∞', '–ë—Ä–æ–∫–∫–æ–ª–∏', '–†–∏—Å']
print(food)
food.remove('–†–∏—Å')
print(food)"""# ['–ö—É—Ä–∏—Ü–∞', '–†—ã–±–∞', '–ë—Ä–æ–∫–∫–æ–ª–∏', '–†–∏—Å']

"""item = names.pop(1)
print(item)
print(names)""" # Roman      ['Gvido', 'Timur']

"""names = ['Timur', 'Gvido', 'Roman', 'Timur', 'Anders', 'Timur']
cnt1 = names.count('Timur')
cnt2 = names.count('Gvido')
cnt3 = names.count('Josef')
print(cnt1)
print(cnt2)
print(cnt3)""" # 3   1   0

"""names = ['Gvido', 'Roman' , 'Timur']
names.reverse()
print(names)""" # ['Timur', 'Roman', 'Gvido']

"""
names = ['Gvido', 'Roman' , 'Timur']
names.clear()
print(names)"""# []

"""names = ['Gvido', 'Roman' , 'Timur']
names_copy = names.copy()              
print(names)
print(names_copy)"""# —Å–æ–∑–¥–∞–µ–º –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—É—é –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ names

"""numbers = [8, 9, 10, 11]
numbers[1]=17
numbers.append(4)
numbers.append(5)
numbers.append(6)
numbers.remove(8)
numbers += numbers
numbers.insert(3, 25)
print(numbers)"""

"""st = input().split()
for i in range(len(st)):
    st[i] = int(st[i])
index1 = st.index(min(st))
index2 = st.index(max(st))
st[index1],st[index2] = st[index2],st[index1]
print(*st)"""

"""st = input().lower().split()
c1 = st.count('a')
c2 = st.count('an')
c3 = st.count('the')
print("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç–∏–∫–ª–µ–π:",c1+c2+c3)"""

"""n = input()
for _ in range(int(n[1:])):
    s = input()
    if '#' in s:
        s = s[:s.find('#')]
    print(s.rstrip())"""

# sort()
"""a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
a.sort(reverse = True)   # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
print('–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:', a)"""

"""a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
a.sort()
print('–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:', a)""" # –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã–π —Å–ø—Å–∏–æ–∫ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é

"""st = input().split()
for i in range(len(st)):
    st[i] = int(st[i])
st.sort()
print(*st)
st.sort(reverse=True)
print(*st)"""

"""numbers = []
for i in range(10):
    numbers.append(i)"""
"""zeros = [0 for i in range(10)] #–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π 10 –Ω—É–ª—è–º–∏ –º–æ–∂–Ω–æ –∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Å–ø–∏—Å–æ—á–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:
squares = [i ** 2 for i in range(10)] #2. –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç–∞–º–∏ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 9 –º–æ–∂–Ω–æ —Ç–∞–∫:
cubes = [i ** 3 for i in range(10, 21)]#3. –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∫—É–±–∞–º–∏ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ—Ç 10 –¥–æ 20 –º–æ–∂–Ω–æ —Ç–∞–∫:
chars = [c for c in 'abcdefg']
print(chars)#4. –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª–∞–º–∏ —Å—Ç—Ä–æ–∫–∏:"""

"""lines = [input() for _ in range(int(input()))]
print(lines)"""

"""evens = [i for i in range(21) if i % 2 == 0]
print(evens)"""

# 1
"""numbers = [i * j for i in range(1, 5) for j in range(2)]
print(numbers)"""
# 2
"""for i in range(1, 5):
    for j in range(2):
        numbers.append(i * j)
print(numbers)"""

"""keywords = ['False', 'True', 'None', 'and', 'with', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'try', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'while', 'yield']
new_keywords =[m for m in keywords if len(m)>=5]
print(new_keywords)"""

"""palindromes = [i for i in range(100,1001) if str(i)==str(i)[::-1]]
print(palindromes)"""

# 1
"""n = int(input())
numbers = [i**2 for i in range(1,n+1)]
print(*numbers, sep='\n')"""
# 2
"""print(*[i ** 2 for i in range(1, int(input()) + 1)], sep='\n')"""

# 1
"""
st = input().split()
for i in range(len(st)):
    st[i] = int(st[i])
new_st = [st[i]**3 for i in range(len(st))]
print(*new_st)
"""
# 2
"""print(*[int(i) ** 3 for i in input().split()])"""

"""print(*[st for st in input().split()],sep = '\n')"""

"""s = input()
print(*[i for i in s if i.isdigit()], sep="")"""


"""print(*[int(i)**2 for i in input().split() if int(i)**2%10!=4 and int(i)%2==0 ], sep=" ")"""

# Sort   Bubble sort     Selection sort      Insertion sort      –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
# –ë—ã—Å—Ç—Ä—ã–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏     Shell sort      Quick sort      Merge sort      Heap sort
#  Bubble sort
"""a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
n = len(a)

for i in range(n - 1):
    for j in range(n - i - 1):
        if a[j] > a[j + 1]:                  # –µ—Å–ª–∏ –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–∞—Ä—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
            a[j], a[j + 1] = a[j + 1], a[j]  # –º–µ–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–∞—Ä—ã –º–µ—Å—Ç–∞–º–∏

print('–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:', a)"""
# Selection sort
"""a = [78, -32, 5, 39, 58, -5, -63, 57, 72, 9, 53, -1, 63, -97, -21, -94, -47, 57, -8, 60, -23, -72, -22, -79, 90, 96, -41, -71, -48, 84, 89, -96, 41, -16, 94, -60, -64, -39, 60, -14, -62, -19, -3, 32, 98, 14, 43, 3, -56, 71, -71, -67, 80, 27, 92, 92, -64, 0, -77, 2, -26, 41, 3, -31, 48, 39, 20, -30, 35, 32, -58, 2, 63, 64, 66, 62, 82, -62, 9, -52, 35, -61, 87, 78, 93, -42, 87, -72, -10, -36, 61, -16, 59, 59, 22, -24, -67, 76, -94, 59]
n = len(a)
i = 0
while i < n-1:
    m = i
    j = i + 1
    while j < n:
        if a[j] < a[m]:
            m = j
        j += 1
    a[i], a[m] = a[m], a[i]
    i += 1
print(a)"""

# Insert sort
"""a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
n = len(a)
print('–ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –ø–µ—Ä–µ–±–æ—Ä–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–≥–æ (–Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)')
for i in range(1, n):
    print(a, i, '–∏—Ç–µ—Ä–∞—Ü–∏—è: a[i] =', a[i])
    elem = a[i]  # –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–µ–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ —Å–ø–∏—Å–∫–∞
    print('–ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –≤ –¥–æ–ø –ø–∞–º—è—Ç—å - elem = a[i] =', a[i])
    j = i
    if a[j - 1] <= elem:
        print(f'–í while –Ω–µ –∑–∞—Ö–æ–¥–∏–º, —Ç–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º–æ–µ —á–∏—Å–ª–æ ({a[i]}) –±–æ–ª—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ ({a[i - 1]})')
    while j >= 1 and a[j - 1] > elem:
        print(f'while: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å = {j}: –Ω–∞ –º–µ—Å—Ç–æ a[j] = {a[j]} –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —á–∏—Å–ª–æ {a[j - 1]}, –∏ –ø–æ–ª—É—á–∞–µ–º', end=' ')
        a[j] = a[j - 1]
        print(a)
        j -= 1
    print(f'–ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –¥–æ–ø –ø–∞–º—è—Ç–∏ elem = {elem} –≤ –∏–Ω–¥–µ–∫—Å {j}')
    a[j] = elem

print(a)"""

"""num = input().split("-")
ls = []
flag = False
for i in range(len(num)):
    if num[i].isdigit()==True:
        flag = True
    else:
        print("NO")
        flag = False
        break
if flag == True:
    if len(num)==4 or len(num)==3:
        for i in range(len(num)):
            ls.append(len(num[i]))
        if (ls == [1,3,3,4] and num[0]=='7') or ls == [3,3,4]:
            print("YES")
        else:
            print("NO")
    else:
        print("NO")"""

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏   def
"""def draw_box():
    for _ in range(5):
        print('*' * 7)"""       # –∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ª—É—á—à–µ –Ω–∞–∑–≤–∞–Ω–∏—è_—á—Ç–æ_–æ–Ω–∞_–¥–µ–ª–∞–µ—Ç()

"""def do_nothing():
    pass
"""

"""def draw_box():
    print('*'*10)
    for i in range(12):
        print('*' + ' ' * 8 + '*')
    print('*'*10)

draw_box()"""

# —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""def draw_box(height, width):    # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    for i in range(height):
        print('*' * width)"""

"""def print_text(txt, n):
    print(txt * n)

print_text('Hello', 5)
print_text('A', 10)"""

"""def print_digit_sum(num):
    summ = 0
    for i in range(len(n)):
        summ += int(n[i])
    print(summ)

n = input()
print_digit_sum(n)"""

"""def print_digit_sum(num):
    print(sum(int(i) for i in str(num)))

n = int(input())
print_digit_sum(n)"""

# –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–∏—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
"""def print_texas():
    birds = 5000 #—ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏ –±–æ–ª—å—à–µ –Ω–∏–≥–¥–µ,–∫–∞–∫ –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–Ω–∞ –Ω–µ –¥–æ—Å—Ç–ø—É–Ω–∞.
    print('–í –¢–µ—Ö–∞—Å–µ –æ–±–∏—Ç–∞–µ—Ç', birds, '–ø—Ç–∏—Ü.')"""

"""def draw_box(height, width):    #–ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—É—Ç height, width. –í–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è i. –ü–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–æ–∂–µ –ª–æ–∫–∞–ª—å–Ω–∞—è.
    for i in range(height):
        print('*' * width)"""

# —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ —ç—Ç–æ–º—É 4-3, –∞ –Ω–µ 3-4
"""def swap(a, b):
    a, b = b, a

a = 4
b = 3
swap(a, b)
print(a - b)"""

"""number = 101
def is_prime(num):
    flag = True
    for i in range(2, num):
        if num % i == 0:
            flag = False
            break
    if num != 1 and flag == True:
        print('–ß–∏—Å–ª–æ', num, '–ø—Ä–æ—Å—Ç–æ–µ.')
    else:
        print('–ß–∏—Å–ª–æ', num, '—Å–æ—Å—Ç–∞–≤–Ω–æ–µ.')
x = 17
y = int(input())
is_prime(x)
is_prime(y)
is_prime(number)"""# –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–¥–µ—Å—å - Flag,num,i

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
"""birds = 5000    # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

def print_texas():
    print('–í –¢–µ—Ö–∞—Å–µ –æ–±–∏—Ç–∞–µ—Ç', birds, '–ø—Ç–∏—Ü.')

def print_california():
    print('–í –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–∏ –æ–±–∏—Ç–∞–µ—Ç', birds, '–ø—Ç–∏—Ü.')"""
"""def print_texas():
    global birds
    birds = 5000
    print('–í –¢–µ—Ö–∞—Å–µ –æ–±–∏—Ç–∞–µ—Ç', birds, '–ø—Ç–∏—Ü.')

def print_california():
    print('–í –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–∏ –æ–±–∏—Ç–∞–µ—Ç', birds, '–ø—Ç–∏—Ü.')

print_texas()
print_california()"""# –í –¢–µ—Ö–∞—Å–µ –æ–±–∏—Ç–∞–µ—Ç 5000 –ø—Ç–∏—Ü. –í –ö–∞–ª–∏—Ñ–æ—Ä–Ω–∏–∏ –æ–±–∏—Ç–∞–µ—Ç 5000 –ø—Ç–∏—Ü.


# Return

"""def convert_to_celsius(temp):
     return (5 / 9) * (temp - 32)

# –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
temp = float(input('B–≤e–¥–∏—Çe –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–¥—É—Å–æ–≤ –ø–æ –§–∞—Ä–µ–Ω–≥–µ–π—Ç—É: '))
celsius = convert_to_celsius(temp)
print(celsius)  # –≥—Ä–∞–¥—É—Å—ã –¶–µ–ª—å—Å–∏—è"""

"""def convert_grade(grade):
    result = -1
    if grade >= 90:
        result = 5
    elif grade >= 80:
        result = 4
    elif grade >= 70:
        result = 3
    elif grade >= 60:
        result = 2
    else:
        result = 1
    return result

grade = int(input('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –æ—Ç–º–µ—Ç–∫—É –ø–æ 100-–±–∞–ª–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ: '))
print(convert_grade(grade))"""

"""def get_days(month):
    mon = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    return mon[month-1]

num = int(input())
print(get_days(num))"""

"""def get_factors(num):
    ls = []
    for i in range(1,num+1):
        if num%i==0:
            ls.append(i)
        else: continue
    return ls

n = int(input())
print(get_factors(n))"""

"""def find_all(target, symbol):
    ls = []
    for i in range(len(target)):
        if target[i] == symbol:
            ls.append(i)
    return ls

string = input()
char = input()
print(find_all(string, char))"""

"""def quick_merge(list1, list2):
    result = []
    p1 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list1
    p2 = 0  # —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ list2

    while p1 < len(list1) and p2 < len(list2):  # –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
        if list1[p1] <= list2[p2]:
            result.append(list1[p1])
            p1 += 1
        else:
            result.append(list2[p2])
            p2 += 1

    if p1 < len(list1):  # –ø—Ä–∏—Ü–µ–ø–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
        result += list1[p1:]
    if p2 < len(list2):
        result += list2[p2:]

    return result

list1 = [3, 10, 11, 12, 47, 57, 58, 63, 77, 79, 80, 95]
list2 = [0, 11, 12, 20, 24, 26, 47, 48, 53, 65, 70, 81, 84, 84, 90]
list3 = quick_merge(list1, list2)
print(list3)"""


"""def merge_list(n):
    ls = []
    for i in range(n):
        string = input().split()
        string.sort()
        for i in range(len(string)):
            string[i] = int(string[i])
        ls.extend(string)
    ls.sort()
    return ls

n = int(input())
merge = merge_list(n)
merge.sort()
print(*merge)"""

#–§—É–Ω–∫—Ü–∏–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏—è –ë—É–ª–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""def is_even(number):
    if number % 2 == 0:
        return True
    else:
        return False
number = int(input())
if is_even(number):
    print("YES")
else:
    print("NO")"""

"""def get_next_prime(num):
    prime = 0
    while prime == 0:
        num += 1
        count = 0
        for i in range(1,num+1):
            if num%i == 0:
                count+=1
        if count > 2:
            continue
        elif count == 1:
            continue
        elif count == 2:
            prime = num
            break
    return prime

n = int(input())
print(get_next_prime(n))"""

"""def is_password_good(password):
    u = sum(1 for i in password if i.isupper())
    l = sum(1 for i in password if i.islower())
    q = sum(1 for i in password if i.isdigit())
    if len(password) >= 8:
        if u >= 1 and l >= 1 and q >= 1:
            return True
        else:
            return False
    else:
        return False

txt = input()
print(is_password_good(txt))"""

"""def is_one_away(word1, word2):
    count = 0
    if word1 == word2:
        return False
    else:
        if len(word1) == len(word2):
            for i in range(len(word1)):
                if word1[i] == word2[i]:
                    count += 1
                else:
                    continue
            if count == len(word1) or count == len(word1) - 1:
                return True
            else:
                return False


        else:
            return False

txt1 = input()
txt2 = input()
print(is_one_away(txt1, txt2))"""


#–º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Å–∏–º–≤–æ–ª—ã —Å –ø–æ–º–æ—â—å—é replace
"""def is_palindrome(text):
    symbols = [' ',',','.','?','!','-']
    for c in symbols:
        text = text.replace(c,"")
    text = text.lower()
    return text == text[::-1]


txt = input()
print(is_palindrome(txt))"""

"""def is_valid_password(password):
    password = password.split(':')
    count = 0
    if len(password) == 3:
        password[0] = password[0].lower()
        if password[0] == password[0][::-1]:
            password[1] = int(password[1])
            for i in range(1,password[1]+1):
                if password[1]%i == 0:
                    count += 1
            if count == 2:
                password[2] = int(password[2])
                if password[2]%2 == 0:
                    return True
                else:
                    return False
            elif count > 2:
                return False
            elif count == 1:
                return False
        else:
            return False
    else:
        return False

psw = input()
print(is_valid_password(psw))"""

#1
"""def convert_to_python_case(text):
    snake = ''
    snake += text[0].lower()
    for i in range(1, len(text)):
        if text[i] == text[i].upper():
            snake += '_'
            snake += text[i].lower()
        elif text[i] in '0123456789':
            snake += text[i]
        else:
            snake += text[i]
    return snake
txt = input()
print(convert_to_python_case(txt))"""
#2
"""def convert_to_python_case(text):
    s = ''
    for el in text:
        if el.isupper():
            s += '_'
        s += el.lower()
    return s[1:]
txt = input()
print(convert_to_python_case(txt))"""

#return –º–æ–∂–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ)
"""def solve(a, b, c, d, e, f):
    x = (d * e - b * f)/(a * d - b * c)
    y = (a * f - c * e)/(a * d - b * c)
    return x, y

xsol, ysol = solve(2, 3, 4, 1, 2, 5)
print('–†–µ—à–µ–Ω–∏–µ–º —Å–∏—Å—Ç–µ–º—ã —è–≤–ª—è—é—Ç—Å—è —á–∏—Å–ª–∞', 'x =', xsol, 'y =', ysol)"""

#–º–æ–¥—É–ª—å random  randrange()  randint()  random()    uniform()   seed()
#–ü–°–ï–í–î–û –°–õ–£–ß–ê–ô–ù–´–ï –ß–ò–°–õ–ê      from random import *
"""import random
num1 = random.randint(0, 17)
num2 = random.randint(-5, 5)
print(num1)
print(num2)"""

"""import random
num = random.randrange(0, 101, 10)"""

"""import random

num = random.random()
print(num)"""

"""import random

num = random.uniform(1.5, 17.3)
print(num)"""

"""import random
random.seed(17)   # —è–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
for _ in range(10):
    print(random.randint(1, 100))"""

"""import random
again = '–¥'
while again.lower() == '–¥':
    print('–ë—Ä–æ—Å–∞–µ–º –∫—É–±–∏–∫–∏... ')
    print('–ó–Ω–∞—á–µ–Ω–∏—è –≥—Ä–∞–Ω–µ–π:')
    print(random.randint(1, 6))
    print(random.randint(1, 6))
    again = input('–ë—Ä–æ—Å–∏—Ç—å –∫—É–±–∏–∫–∏ –µ—â–µ —Ä–∞–∑? (–¥ = –¥–∞, –Ω = –Ω–µ—Ç): ')"""

"""import random
for _ in range(10):
    num = random.randint(0, 1)
    if num == 0:
        print('–û—Ä–µ–ª')
    else:
        print('–†–µ—à–∫–∞')"""

#shuffle()  choice()    sample()
"""import random

numbers = [1, 2, 3, 4, 5, 6, 7, 8]
random.shuffle(numbers)
print(numbers)"""

"""import random
print(random.choice('BEEGEEK'))
print(random.choice([1, 2, 3, 4]))
print(random.choice(['a', 'b', 'c', 'd']))"""

"""import random

numbers = [2, 5, 8, 9, 12]
print(random.sample(numbers, 1))
print(random.sample(numbers, 2))
print(random.sample(numbers, 3))
print(random.sample(numbers, 5))"""

"""import math
n = int(input())
print(math.ceil(math.log(n , 2)))"""

"""def is_valid(n):
    if n.isdigit() :
        n = int(n)
        if n > 100 or n < 1:
            return ('–¢—ã —á–µ, –¥–µ–±–∏–ª? –ê–ë–û–ë–ê')
        elif 1 <= n <= 100:
            if n > num:
                return ('–í–∞—à–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫')
            elif n < num:
                return ('–í–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫')
            elif n == num:
                return ('–í—ã —É–≥–∞–¥–∞–ª–∏, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!')
    elif n.isalpha():
        return ('–ê –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ-—Ç–∞–∫–∏ –≤–≤–µ–¥–µ–º —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100?')

import random
num = random.randint(1, 100)
print('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ–≤—É—é —É–≥–∞–¥–∞–π–∫—É')
n = input()
while num != n:
    print(is_valid(n))
    n = input()"""

"""import random

answers = ['–ë–µ—Å—Å–ø–æ—Ä–Ω–æ', '–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è - –¥–∞', '–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞', '–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π',
'–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ', '–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ', '–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ', '–ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç', '–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π',
'–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã', '–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å', '–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º - –Ω–µ—Ç', '–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞',
'–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç - –¥–∞', '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ',
'–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º', '–î–∞', '–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å', '–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ']

print('–ü—Ä–∏–≤–µ—Ç –ú–∏—Ä, –Ø –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä, –∏ —è –∑–Ω–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å.')

name = input('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
print('–ü—Ä–∏–≤–µ—Ç',  name)

again = '–¥'
while again.lower() == '–¥':
    question = input('–ó–∞–¥–∞–π –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å: ')
    print(random.choice(answers))
    again = input('–ó–∞–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å? (–¥ = –¥–∞, –Ω = –Ω–µ—Ç): ')

    if not again.lower() == '–¥':
        print('–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã!')"""

"""def generate_password(length , chars):
    password = ''
    for j in range(length):
        password += random.choice(chars)
    return password

import random
digits =  '0123456789'
lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
uppercase_letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
punctuation = "!#$%&*+-=?@^_"
chars = ''
n = int(input('–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–æ–ª–µ–π –Ω—É–∂–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏?'))
length = int(input('–î–ª–∏–Ω—É –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è'))
flag1 = input('–í–∫–ª—é—á–∞—Ç—å –ª–∏ —Ü–∏—Ñ—Ä—ã 0123456789?')
flag2 = input('–í–∫–ª—é—á–∞—Ç—å –ª–∏ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ –±—É–∫–≤—ã ABCDEFGHIJKLMNOPQRSTUVWXYZ?')
flag3 = input('–í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã abcdefghijklmnopqrstuvwxyz?')
flag4 = input('–í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å–∏–º–≤–æ–ª—ã !#$%&*+-=?@^_?')
flag5 = input('–ò—Å–∫–ª—é—á–∞—Ç—å –ª–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã il1Lo0O?').strip()
if flag1.lower() == '–¥':
    chars += digits
if flag2.lower() == '–¥':
    chars += uppercase_letters
if flag3.lower() == '–¥':
    chars += lowercase_letters
if flag4.lower() == '–¥':
    chars +=  punctuation
if flag5.lower() == '–¥':
    for c in 'il1Lo0O':
        chars = chars.replace(c , '')

while n!=0:
    print("–ü–∞—Ä–æ–ª—å  : " , end = ' ')
    print(generate_password(length,chars))
    n -= 1"""

#–®–ò–§–† –¶–ï–ó–ê–†–Ø
# –ó–∞–¥–∞–µ–º —á–µ—Ç—ã—Ä–µ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: —à–∏—Ñ—Ä-–¥–µ—à–∏—Ñ—Ä, —è–∑—ã–∫, —à–∞–≥, —Ç–µ–∫—Å—Ç.
# –ó–∞ –∫–∞–∂–¥—ã–º –≤–æ–ø—Ä–æ—Å–æ–º —Å—Ç–æ–∏—Ç while-–ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º.
"""
whats_direction = input('–ß—Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å: —à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å? \n').lower()
while whats_direction != '—à–∏—Ñ—Ä–æ–≤–∞—Ç—å' and whats_direction != '–¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å':
    whats_direction = input('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ —Ç—ã –≤–≤—ë–ª. –ù–∞–ø–∏—à–∏ "—à–∏—Ñ—Ä–æ–≤–∞—Ç—å" –ª–∏–±–æ "–¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å". \n').lower()

whats_language = input('–ö–∞–∫–æ–π –Ω—É–∂–µ–Ω —è–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π? \n').lower()
while whats_language != '—Ä—É—Å—Å–∫–∏–π' and whats_language != '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π':
    whats_language = input('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ —Ç—ã –≤–≤—ë–ª. –ù–∞–ø–∏—à–∏ "—Ä—É—Å—Å–∫–∏–π" –ª–∏–±–æ "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π". \n').lower()

whats_step = input('–ù–∞ —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤–æ–≤ –º—ã —Å–¥–≤–∏–≥–∞–µ–º –±—É–∫–≤—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É? –û—Ç–≤–µ—Ç –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ–º. \n')
while whats_step.isdigit() != True:
    whats_step = input('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ —Ç—ã –≤–≤—ë–ª. –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ. \n')

whats_text = input('–ö–∞–∫–æ–π —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å? \n')
while whats_text.isspace() == True:
    whats_text = input('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ —Ç—ã –≤–≤—ë–ª. –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç. \n')


# –û–±—ä—è–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —á–µ—Ç—ã—Ä—å–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ ‚Äì —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —á–µ—Ç—ã—Ä–µ–º –≤–æ–ø—Ä–æ—Å–∞–º.
def caesar(direction, language, step, text):
    # –ß–µ—Ç—ã—Ä–µ —Å–ª–æ–≤–∞—Ä—è –ø–æ–¥ —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –±–æ–ª—å—à–∏–µ –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ.
    # –í —Ç–µ–æ—Ä–∏–∏ –º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å –±–µ–∑ –Ω–∏—Ö –∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ Unicode.
    # –ù–æ –º–Ω–µ –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–∏ —Å–ª–æ–≤–∞—Ä–∏.

    upper_eng_alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    lower_eng_alphabet = 'abcdefghijklmnopqrstuvwxyz'
    upper_rus_alphabet = '–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø'
    lower_rus_alphabet = '–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'

    # –û–±—ä—è–≤–ª—è–µ–º —Ü–∏–∫–ª for. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π —Ä–∞–≤–Ω–æ –¥–ª–∏–Ω–µ —Å—Ç—Ä–æ–∫–∏ text.
    for i in range(len(text)):

        # –ó–∞–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: –¥–ª–∏–Ω—É –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π.
        if language == '—Ä—É—Å—Å–∫–∏–π':
            alphas = 32
            low_alphabet = lower_rus_alphabet
            upp_alphabet = upper_rus_alphabet
        if language == '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π':
            alphas = 26
            low_alphabet = lower_eng_alphabet
            upp_alphabet = upper_eng_alphabet

        # –ï—Å–ª–∏ text[i] —è–≤–ª—è–µ—Ç—Å—è –±—É–∫–≤–æ–π:
        if text[i].isalpha():

            # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ —Å–∏–º–≤–æ–ª–∞ text[i] –≤ —Å–ª–æ–≤–∞—Ä–µ upp_alphabet –ª–∏–±–æ low_alphabet.
            if text[i] == text[i].lower():
                place = low_alphabet.index(text[i])
            if text[i] == text[i].upper():
                place = upp_alphabet.index(text[i])

            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å, —Ç–æ:
            if direction == '–¥–µ—à–∏—Ñ—Ä–æ–≤–∞—Ç—å':
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.
                # –ù–æ–≤—ã–π –Ω–¥–µ–∫—Å = –°—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å - –®–∞–≥ % –î–ª–∏–Ω–∞ –∞–ª—Ñ–∞–≤–∏—Ç–∞
                index = (place - int(step)) % alphas


            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å, —Ç–æ:
            elif direction == '—à–∏—Ñ—Ä–æ–≤–∞—Ç—å':
                # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.
                # –ù–æ–≤—ã–π –Ω–¥–µ–∫—Å = –°—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å + –®–∞–≥ % –î–ª–∏–Ω–∞ –∞–ª—Ñ–∞–≤–∏—Ç–∞
                index = (place + int(step)) % alphas

            # –í—ã–≤–æ–¥–∏–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª.
            if text[i] == text[i].lower():
                print(low_alphabet[index], end='')
            if text[i] == text[i].upper():
                print(upp_alphabet[index], end='')

                # –ï—Å–ª–∏ text[i] –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –±—É–∫–≤–æ–π:
        else:
            # –î–µ–ª–∞–µ–º print —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
            print(text[i], end='')


# –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —á–µ—Ç—ã—Ä–µ input`–∞ –∏–∑ –Ω–∞—á–∞–ª–∞ –∫–æ–¥–∞.
caesar(whats_direction, whats_language, whats_step, whats_text)"""

"""from random import choice

word_list = [
    '–≥–æ–¥', '—á–µ–ª–æ–≤–µ–∫', '–≤—Ä–µ–º—è', '–¥–µ–ª–æ', '–∂–∏–∑–Ω—å', '–¥–µ–Ω—å', '—Ä—É–∫–∞', '—Ä–∞–±–æ—Ç–∞', '—Å–ª–æ–≤–æ', '–º–µ—Å—Ç–æ',
    '–≤–æ–ø—Ä–æ—Å', '–ª–∏—Ü–æ', '–≥–ª–∞–∑', '—Å—Ç—Ä–∞–Ω–∞', '–¥—Ä—É–≥', '—Å—Ç–æ—Ä–æ–Ω–∞', '–¥–æ–º', '—Å–ª—É—á–∞–π', '—Ä–µ–±–µ–Ω–æ–∫', '–≥–æ–ª–æ–≤–∞',
    '—Å–∏—Å—Ç–µ–º–∞', '–≤–∏–¥', '–∫–æ–Ω–µ—Ü', '–æ—Ç–Ω–æ—à–µ–Ω–∏–µ', '–≥–æ—Ä–æ–¥', '—á–∞—Å—Ç—å', '–∂–µ–Ω—â–∏–Ω–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '–∑–µ–º–ª—è',
    '—Ä–µ—à–µ–Ω–∏–µ', '–≤–ª–∞—Å—Ç—å', '–º–∞—à–∏–Ω–∞', '–∑–∞–∫–æ–Ω', '—á–∞—Å', '–æ–±—Ä–∞–∑', '–æ—Ç–µ—Ü', '–∏—Å—Ç–æ—Ä–∏—è', '–Ω–æ–≥–∞', '–≤–æ–¥–∞',
    '–≤–æ–π–Ω–∞', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', '–∫–æ–º–ø–∞–Ω–∏—è', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–¥–≤–µ—Ä—å', '–Ω–∞—Ä–æ–¥', '–æ–±–ª–∞—Å—Ç—å', '—á–∏—Å–ª–æ',
    '–≥–æ–ª–æ—Å', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '–≥—Ä—É–ø–ø–∞', '–∂–µ–Ω–∞', '–ø—Ä–æ—Ü–µ—Å—Å', '—É—Å–ª–æ–≤–∏–µ', '–∫–Ω–∏–≥–∞', '–Ω–æ—á—å', '—Å—É–¥', '–¥–µ–Ω—å–≥–∞',
    '—É—Ä–æ–≤–µ–Ω—å', '–Ω–∞—á–∞–ª–æ', '–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ', '—Å—Ç–æ–ª', '—Å—Ä–µ–¥—Å—Ç–≤–æ', '—Å–≤—è–∑—å', '–∏–º—è', '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', '—Ñ–æ—Ä–º–∞',
    '–ø—É—Ç—å', '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '–∫–∞—á–µ—Å—Ç–≤–æ', '–¥–µ–π—Å—Ç–≤–∏–µ', '—Å—Ç–∞—Ç—å—è', '–æ–±—â–µ—Å—Ç–≤–æ', '—Å–∏—Ç—É–∞—Ü–∏—è', '–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    '—à–∫–æ–ª–∞', '–¥—É—à–∞', '–¥–æ—Ä–æ–≥–∞', '—è–∑—ã–∫', '–≤–∑–≥–ª—è–¥', '–º–æ–º–µ–Ω—Ç', '–º–∏–Ω—É—Ç–∞', '–º–µ—Å—è—Ü', '–ø–æ—Ä—è–¥–æ–∫', '—Ü–µ–ª—å',
    '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–º—É–∂', '–ø–æ–º–æ—â—å', '–º—ã—Å–ª—å', '–≤–µ—á–µ—Ä', '–æ—Ä–≥–∞–Ω', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '—Ä—ã–Ω–æ–∫', '–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ',
    '–ø–∞—Ä—Ç–∏—è', '—Ä–æ–ª—å', '—Å–º—ã—Å–ª', '–º–∞–º–∞', '–º–µ—Ä–∞', '—É–ª–∏—Ü–∞', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ', '–∑–∞–¥–∞—á–∞', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '—Ç–µ–∞—Ç—Ä',
    '–≤–Ω–∏–º–∞–Ω–∏–µ', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '—Ç—Ä—É–¥', '—Ç–µ–ª–æ', '–ø–∏—Å—å–º–æ', '—Ü–µ–Ω—Ç—Ä', '—É—Ç—Ä–æ', '–º–∞—Ç—å', '–∫–æ–º–Ω–∞—Ç–∞',
    '—Å–µ–º—å—è', '—Å—ã–Ω', '—Å–º–µ—Ä—Ç—å', '–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–∏–Ω—Ç–µ—Ä–µ—Å', '—Ñ–µ–¥–µ—Ä–∞—Ü–∏—è', '–≤–µ–∫', '–∏–¥–µ—è', '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–∞–≤—Ç–æ—Ä',
    '–æ–∫–Ω–æ', '–æ—Ç–≤–µ—Ç', '—Å–æ–≤–µ—Ç', '—Ä–∞–∑–≥–æ–≤–æ—Ä', '–º—É–∂—á–∏–Ω–∞', '—Ä—è–¥', '—Å—á–µ—Ç', '–º–Ω–µ–Ω–∏–µ', '—Ü–µ–Ω–∞', '—Ç–æ—á–∫–∞', '–ø–ª–∞–Ω',
    '–ø—Ä–æ–µ–∫—Ç', '–≥–ª–∞–≤–∞', '–º–∞—Ç–µ—Ä–∏–∞–ª', '–æ—Å–Ω–æ–≤–∞', '–ø—Ä–∏—á–∏–Ω–∞', '–¥–≤–∏–∂–µ–Ω–∏–µ', '–∫—É–ª—å—Ç—É—Ä–∞', '—Å–µ—Ä–¥—Ü–µ', '—Ä—É–±–ª—å', '–Ω–∞—É–∫–∞',
    '–¥–æ–∫—É–º–µ–Ω—Ç', '–Ω–µ–¥–µ–ª—è', '–≤–µ—â—å', '—á—É–≤—Å—Ç–≤–æ', '–ø—Ä–∞–≤–∏–ª–æ', '—Å–ª—É–∂–±–∞', '–≥–∞–∑–µ—Ç–∞', '—Å—Ä–æ–∫', '–∏–Ω—Å—Ç–∏—Ç—É—Ç', '—Ö–æ–¥',
    '—Å—Ç–µ–Ω–∞', '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '–ø–ª–µ—á–æ', '–æ–ø—ã—Ç', '–≤—Å—Ç—Ä–µ—á–∞', '–ø—Ä–∏–Ω—Ü–∏–ø', '—Å–æ–±—ã—Ç–∏–µ', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '—Ç–æ–≤–∞—Ä–∏—â',
    '—Å–æ–∑–¥–∞–Ω–∏–µ', '–∑–Ω–∞—á–µ–Ω–∏–µ', '–æ–±—ä–µ–∫—Ç', '–≥—Ä–∞–∂–¥–∞–Ω–∏–Ω', '–æ—á–µ—Ä–µ–¥—å', '–ø–µ—Ä–∏–æ–¥', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—Å–æ—Å—Ç–∞–≤', '–ø—Ä–∏–º–µ—Ä',
    '–ª–µ—Å', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '–¥–µ–≤—É—à–∫–∞', '–¥–∞–Ω–Ω—ã–µ', '–ø–∞–ª–µ—Ü', '—Å—É–¥—å–±–∞', '—Ç–∏–ø', '–º–µ—Ç–æ–¥', '–ø–æ–ª–∏—Ç–∏–∫–∞', '–∞—Ä–º–∏—è', '–±—Ä–∞—Ç',
    '–ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å', '–±–æ—Ä—å–±–∞', '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ', '—à–∞–≥', '–∏–≥—Ä–∞', '—É—á–∞—Å—Ç–∏–µ', '—Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è', '–∫—Ä–∞–π', '—Ä–∞–∑–º–µ—Ä', '–Ω–æ–º–µ—Ä',
    '—Ä–∞–π–æ–Ω', '–Ω–∞—Å–µ–ª–µ–Ω–∏–µ', '–±–∞–Ω–∫', '–Ω–∞—á–∞–ª—å–Ω–∏–∫', '–∫–ª–∞—Å—Å', '–∑–∞–ª', '–∏–∑–º–µ–Ω–µ–Ω–∏–µ', '–±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ', '—Ö–∞—Ä–∞–∫—Ç–µ—Ä', '–∫—Ä–æ–≤—å',
    '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ø–æ–∑–∏—Ü–∏—è', '–≥–µ—Ä–æ–π', '—Ç–µ—á–µ–Ω–∏–µ', '–¥–µ–≤–æ—á–∫–∞', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–≥–æ—Å—Ç—å', '–≤–æ–∑–¥—É—Ö', '–º–∞–ª—å—á–∏–∫', '—Ñ–∏–ª—å–º',
    '–¥–æ–≥–æ–≤–æ—Ä', '—Ä–µ–≥–∏–æ–Ω', '–≤—ã–±–æ—Ä', '—Å–≤–æ–±–æ–¥–∞', '–≤—Ä–∞—á', '—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–Ω–µ–±–æ', '—Ñ–∞–∫—Ç', '—Ü–µ—Ä–∫–æ–≤—å', '–∑–∞–≤–æ–¥', '—Ñ–∏—Ä–º–∞',
    '–±–∏–∑–Ω–µ—Å', '—Å–æ—é–∑', '–¥–µ–Ω—å–≥–∏', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '—Ä–æ–¥', '–∫–æ–º–∞–Ω–¥–∞', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '—Å–ø–∏–Ω–∞', '–¥—É—Ö', '–º—É–∑—ã–∫–∞',
    '—Å–ø–æ—Å–æ–±', '—Ö–æ–∑—è–∏–Ω', '–ø–æ–ª–µ', '–¥–æ–ª–ª–∞—Ä', '–ø–∞–º—è—Ç—å', '–ø—Ä–∏—Ä–æ–¥–∞', '–¥–µ—Ä–µ–≤–æ', '–æ—Ü–µ–Ω–∫–∞', '–æ–±—ä–µ–º', '–∫–∞—Ä—Ç–∏–Ω–∞',
    '–ø—Ä–æ—Ü–µ–Ω—Ç', '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', '–ø–∏—Å–∞—Ç–µ–ª—å', '—Å—Ü–µ–Ω–∞', '–∞–Ω–∞–ª–∏–∑', '–æ—Å–Ω–æ–≤–∞–Ω–∏–µ', '–ø–æ–≤–æ–¥', '–≤–∞—Ä–∏–∞–Ω—Ç', '–±–µ—Ä–µ–≥',
    '–º–æ–¥–µ–ª—å', '—Å—Ç–µ–ø–µ–Ω—å', '—Å–∞–º–æ–ª–µ—Ç', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–≥—Ä–∞–Ω–∏—Ü–∞', '–ø–µ—Å–Ω—è', '–ø–æ–ª–æ–≤–∏–Ω–∞', '–º–∏–Ω–∏—Å—Ç—Ä', '—É–≥–æ–ª', '–∑—Ä–µ–Ω–∏–µ',
    '–ø—Ä–µ–¥–º–µ—Ç', '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–æ–ø–µ—Ä–∞—Ü–∏—è', '–¥–≤–æ—Ä', '—Å–ø–µ–∫—Ç–∞–∫–ª—å', '—Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ', '—Å–æ–ª–Ω—Ü–µ', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '—Ä–æ–¥–∏—Ç–µ–ª—å',
    '—É—á–∞—Å—Ç–Ω–∏–∫', '–∂—É—Ä–Ω–∞–ª', '–±–∞–∑–∞', '–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ', '–∑–∞—â–∏—Ç–∞', '–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Å—Ç–∏—Ö', '–º–æ—Ä–µ', '—É–¥–∞—Ä', '–∑–Ω–∞–Ω–∏–µ',
    '—Å–æ–ª–¥–∞—Ç', '–º–∏–ª–ª–∏–æ–Ω', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '–ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å', '—Å–æ–Ω', '—Å–æ–∑–Ω–∞–Ω–∏–µ', '–±—É–º–∞–≥–∞', '—Ä–µ—Ñ–æ—Ä–º–∞',
    '–æ—Ä—É–∂–∏–µ', '–ª–∏–Ω–∏—è', '—Ç–µ–∫—Å—Ç', '–≤—ã—Ö–æ–¥', '—Ä–µ–±—è—Ç–∞', '–º–∞–≥–∞–∑–∏–Ω', '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ', '—É—á–∞—Å—Ç–æ–∫', '—É—Å–ª—É–≥–∞', '–ø–æ—ç—Ç',
    '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–∂–µ–ª–∞–Ω–∏–µ', '–ø–∞—Ä–∞', '—É—Å–ø–µ—Ö', '—Å—Ä–µ–¥–∞', '–≤–æ–∑—Ä–∞—Å—Ç', '–∫–æ–º–ø–ª–µ–∫—Å', '–±—é–¥–∂–µ—Ç', '–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ',
    '–ø–ª–æ—â–∞–¥—å', '–≥–µ–Ω–µ—Ä–∞–ª', '–≥–æ—Å–ø–æ–¥–∏–Ω', '–¥–æ—á—å', '–ø–æ–Ω—è—Ç–∏–µ', '–∫–∞–±–∏–Ω–µ—Ç', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '—Ñ–æ–Ω–¥', '—Å—Ñ–µ—Ä–∞', '–ø–∞–ø–∞',
    '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫', '–ø—Ä–æ–¥—É–∫—Ü–∏—è', '–±—É–¥—É—â–µ–µ', '–ø—Ä–æ–¥—É–∫—Ç', '—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ', '—Ö—É–¥–æ–∂–Ω–∏–∫', '—Ä–µ—Å–ø—É–±–ª–∏–∫–∞', '—Å—É–º–º–∞', '–∫–æ–Ω—Ç—Ä–æ–ª—å',
    '–ø–∞—Ä–µ–Ω—å', '–≤–µ—Ç–µ—Ä', '—Ö–æ–∑—è–π—Å—Ç–≤–æ', '–ø–æ–º–æ—á—å', '–∫—É—Ä—Å', '–≥—É–±–∞', '—Ä–µ–∫–∞', '–≥—Ä—É–¥—å', '–æ–≥–æ–Ω—å', '–Ω–æ—Å', '–≤–æ–ª–æ—Å', '—É—Ö–æ',
    '–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ', '—Ä–∞–¥–æ—Å—Ç—å', '—Å–∞–¥', '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞', '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å', '–¥–æ–∫—Ç–æ—Ä', '–ª–µ—Ç–æ', '–∫–∞–º–µ–Ω—å', '–∑–¥–∞–Ω–∏–µ',
    '–∫–∞–ø–∏—Ç–∞–Ω', '—Å–æ–±–∞–∫–∞', '–∏—Ç–æ–≥', '—Ä–∏—Å', '—Ç–µ—Ö–Ω–∏–∫–∞', '—ç–ª–µ–º–µ–Ω—Ç', '–∏—Å—Ç–æ—á–Ω–∏–∫', '–¥–µ—Ä–µ–≤–Ω—è', '–¥–µ–ø—É—Ç–∞—Ç', '–ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ',
    '—Ä–æ—Ç', '–º–∞—Å—Å–∞', '–∫–æ–º–∏—Å—Å–∏—è', '—Ü–≤–µ—Ç', '—Ä–∞—Å—Å–∫–∞–∑', '—Ñ—É–Ω–∫—Ü–∏—è', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '–º—É–∂–∏–∫', '–æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ',
    '–æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–æ', '—Ä–∞–±–æ—Ç–Ω–∏–∫', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–ª–∏—Å—Ç', '–∑–≤–µ–∑–¥–∞', '–≥–æ—Ä–∞', '–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ', '–ø–æ–±–µ–¥–∞', '—Ç–æ–≤–∞—Ä',
    '–≤–æ–ª—è', '–∑–æ–Ω–∞', '–ø—Ä–µ–¥–µ–ª', '—Ü–µ–ª–æ–µ', '–ª–∏—á–Ω–æ—Å—Ç—å', '–æ—Ñ–∏—Ü–µ—Ä', '–≤–ª–∏—è–Ω–∏–µ', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å',
]


def get_word():
    return choice(word_list).upper()


# —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
def display_hangman(tries):
    stages = [
        '''
        \|||/ 
        (o o)
----ooO--(_)---------
|                     |
|                     |
|      –ö –û –ù –ï –¶      |
|                     |
|                     |
'---------------ooO---'
       |  |  | 
       |  |  | 
       |__|__| 
       /_'Y'_\  
      (__/ \__)  
        ''',
        '''
        \|||/ 
        (o o)
----ooO--(_)---------
|                     |
|                     |
|  –û—Å—Ç–∞–ª–æ—Å—å 1 –ø–æ–ø—ã—Ç–∫–∞ |
|                     |
|                     |
'---------------ooO---'
       |  |  | 
       |  |  | 
       |__|__| 
       /_'Y'_\  
      (__/ \__)  
        ''',
        '''
        \|||/ 
  """ """     (o o)
----ooO--(_)---------
|                     |
|                     |
|  –û—Å—Ç–∞–ª–æ—Å—å 2 –ø–æ–ø—ã—Ç–∫–∏ |
|                     |
|                     |
'---------------ooO---'
       |  |  |
       |  |  |
       |__|__|
       /_'Y'_\
      (__/ \__)
        ''',

        '''
        \|||/
        (o o)
----ooO--(_)---------
|                     |
|                     |
|  –û—Å—Ç–∞–ª–æ—Å—å 3 –ø–æ–ø—ã—Ç–∫–∏ |
|                     |
|                     |
'---------------ooO---'
       |  |  |
       |  |  |
       |__|__|
       /_'Y'_\
      (__/ \__)
        ''',
        '''
        \|||/
        (o o)
----ooO--(_)---------
|                     |
|                     |
|  –û—Å—Ç–∞–ª–æ—Å—å 4 –ø–æ–ø—ã—Ç–∫–∏ |
|                     |
|                     |
'---------------ooO---'
       |  |  |
       |  |  |
       |__|__|
       /_'Y'_\
      (__/ \__)
        ''',
        '''
        \|||/
        (o o)
----ooO--(_)---------
|                     |
|                     |
|  –û—Å—Ç–∞–ª–æ—Å—å 5 –ø–æ–ø—ã—Ç–æ–∫ |
|                     |
|                     |
'---------------ooO---'
       |  |  |
       |  |  |
       |__|__|
       /_'Y'_\
      (__/ \__)
        ''',
        '''
        \|||/
        (o o)
----ooO--(_)---------
|                     |
|                     |
|  –û—Å—Ç–∞–ª–æ—Å—å 6 –ø–æ–ø—ã—Ç–æ–∫ |
|                     |
|                     |
'---------------ooO---'
       |  |  |
       |  |  |
       |__|__|
       /_'Y'_\
      (__/ \__)
      '''
    ]
    return stages[tries]


def letter_finder(ltr, original_word, hidden_word):
    lst_index = []
    for i, letter in enumerate(original_word):
        if letter == ltr:
            lst_index.append(i)
    for i in lst_index:
        hidden_word[i] = ltr
    return hidden_word


def play(word):
    end = '- ' * 30
    pc_word = list(word)
    word_completion = list('_' * len(word))  # —Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–∏–º–≤–æ–ª—ã _ –Ω–∞ –∫–∞–∂–¥—É—é –±—É–∫–≤—É –∑–∞–¥—É–º–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
    guessed_letters = []  # —Å–ø–∏—Å–æ–∫ —É–∂–µ –Ω–∞–∑–≤–∞–Ω–Ω—ã—Ö –±—É–∫–≤
    guessed_words = []  # —Å–ø–∏—Å–æ–∫ —É–∂–µ –Ω–∞–∑–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
    tries = 6  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    print('\n–î–∞–≤–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –≤ —É–≥–∞–¥–∞–π–∫—É —Å–ª–æ–≤!')
    print('–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑', len(pc_word), '–±—É–∫–≤')
    # print(pc_word)  # –í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    while True:
        easy_or_not = input('–ß—Ç–æ–±—ã –±—ã–ª–æ –ø—Ä–æ—â–µ, —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—ã? (–¥–∞/–Ω–µ—Ç) ')
        if easy_or_not.isalpha():
            if easy_or_not.lower() == '–¥–∞':
                word_completion[0] = pc_word[0]
                word_completion[-1] = pc_word[-1]
                break
            elif easy_or_not.lower() == '–Ω–µ—Ç':
                print('–í–∞—à –≤—ã–±–æ—Ä, –∏–≥—Ä–∞–µ–º! =)')
                break
            else:
                print('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ...')
        else:
            print('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ...')

    while tries:
        if word_completion == pc_word:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π —É–≥–∞–¥—ã–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞ –ø–æ –æ–¥–Ω–æ–π –±—É–∫–≤–µ
            print('–£—Ä–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!')
            break
        print(display_hangman(tries))
        print(end)
        print(*word_completion)
        user_letter = input('\n–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É –∏–ª–∏ —Å–ª–æ–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é: ').upper()
        if len(user_letter) == len(pc_word):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–≤–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            if user_letter in guessed_words:
                print('–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ –≤—ã —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏, —ç—Ç–æ –Ω–µ –æ–Ω–æ!')
                continue
            guessed_words.append(user_letter.upper())
            if user_letter.upper() == ''.join(pc_word):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–æ–¥ —Å–ª–æ–≤–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
                print('–£—Ä–∞! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!')
                break
        if not user_letter.isalpha():
            print('–í—ã —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏!')
            continue
        elif user_letter in guessed_letters:
            print('–í—ã —É–∂–µ –Ω–∞–∑—ã–≤–∞–ª–∏ —Ç–∞–∫—É—é –±—É–∫–≤—É!')
            continue
        guessed_letters.append(user_letter)  # –î–æ–±–∞–≤–ª—è–µ–º –±—É–∫–≤—É –≤ —Å–ø–∏—Å–æ–∫ —É–∂–µ –Ω–∞–∑–≤–∞–Ω–Ω—ã—Ö –±—É–∫–≤
        if user_letter in pc_word:  # –ï—Å–ª–∏ –±—É–∫–≤–∞ –±—ã–ª–∞ —É–≥–∞–¥–∞–Ω–∞
            letter_finder(user_letter, pc_word, word_completion)
            tries -= 1
        else:
            print('–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ –±—É–∫–≤—É/—Å–ª–æ–≤–æ!')
            tries -= 1
    print('–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!')
    print(display_hangman(0))
    print('–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ:', *pc_word)
    return end


print(play(get_word()))

while True:
    repeat = input('–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑? (–¥–∞/–Ω–µ—Ç) ')
    if repeat.isalpha():
        if repeat.lower() == '–¥–∞':
            play(get_word())
        elif repeat.lower() == '–Ω–µ—Ç':
            print('–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ –≤—Å—Ç—Ä–µ—á–∏! =)', '* ' * 30, sep='\n')
            break
        else:
            print('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ')
    else:
      print('–ù–µ –ø–æ–Ω—è–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ')"""